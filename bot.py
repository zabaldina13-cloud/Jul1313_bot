# requirements:
# python-telegram-bot==20.7
# Run with: python bot.py

import os, json, datetime as dt
from zoneinfo import ZoneInfo
from typing import Dict, Any
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

BOT_TOKEN = os.getenv("BOT_TOKEN", "").strip()
if not BOT_TOKEN:
    raise SystemExit("Environment variable BOT_TOKEN is not set. Please set it to your @BotFather token.")

DATA_FILE = "users.json"
KYIV_TZ = ZoneInfo("Europe/Kyiv")

# ---------- Persistence ----------
def load_data() -> Dict[str, Any]:
    if not os.path.exists(DATA_FILE):
        return {"users": {}}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            return json.load(f)
        except json.JSONDecodeError:
            return {"users": {}}

def save_data(data: Dict[str, Any]):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ---------- Program Logic ----------
WEEK_FOCUS = {
    1: "–ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ø–µ—á—ñ–Ω–∫–∏ –π —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—è —â–∏—Ç–æ–ø–æ–¥—ñ–±–∫–∏",
    2: "–ó–∞–ø—É—Å–∫ –∂–æ–≤—á–æ–≤–∏–¥—ñ–ª–µ–Ω–Ω—è —ñ —Ç—Ä–∞–≤–ª–µ–Ω–Ω—è",
    3: "–í–∏–≤–µ–¥–µ–Ω–Ω—è –µ—Å—Ç—Ä–æ–≥–µ–Ω—ñ–≤ (DIM/I3C)",
    4: "–ì–ª–∏–±–æ–∫–∞ –¥–µ—Ç–æ–∫—Å–∏–∫–∞—Ü—ñ—è + –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–∏",
    5: "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ–∫—Ä–æ–±—ñ–æ–º—É —ñ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—è –≥–æ—Ä–º–æ–Ω—ñ–≤",
    6: "–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç—É + –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–∞–¥–Ω–∏—Ä–Ω–∏–∫—ñ–≤",
}

def day_plan(day_number: int) -> str:
    """Return checklist text for given day (1..42)."""
    week = (day_number - 1) // 7 + 1
    base_morning = "‚Ä¢ –ü—ñ—Å–ª—è —Å–Ω—ñ–¥–∞–Ω–∫—É: Thyrocsin (2 –∫–∞–ø—Å), D3+K2 (1), –û–º–µ–≥–∞-3 (2000 –º–≥), –∑–µ–ª–µ–Ω–∏–π —á–∞–π"
    base_day = "‚Ä¢ –û–±—ñ–¥: NAC 600 –º–≥, –ö—É—Ä–∫—É–º—ñ–Ω 500 –º–≥, + –±—ñ–ª–æ–∫ (—Ä–∏–±–∞/–º‚Äô—è—Å–æ) —ñ –æ–≤–æ—á—ñ"
    base_even = "‚Ä¢ –í–µ—á—ñ—Ä: –ú–∞–≥–Ω—ñ–π, –¢–∞—É—Ä–∏–Ω 500‚Äì1000 –º–≥, –ü—Ä–∏–º—É–ª–∞, –ü—Ä–æ–±—ñ–æ—Ç–∏–∫ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º"

    if week == 1:
        add_morning = ""
        add_day = "‚Ä¢ –¢—Ä–∞–≤–ª–µ–Ω–Ω—è: –ê—Ä—Ç–∏—à–æ–∫ / —á–∞–π –∑ –∫—É–ª—å–±–∞–±–∏ –ø—ñ—Å–ª—è —ó–∂—ñ"
        add_even = "‚Ä¢ 15 —Ö–≤ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∞ –∞–±–æ –ª–µ–≥–∫–∞ —Ä–æ–∑—Ç—è–∂–∫–∞"
    elif week == 2:
        add_morning = "‚Ä¢ –í—Ä–∞–Ω—Ü—ñ –≤–æ–¥–∞ –∑ –ª–∏–º–æ–Ω–æ–º + –¥—Ä—ñ–±–∫–∞ —Å–æ–ª—ñ"
        add_day = "‚Ä¢ –î–æ–¥–∞–π –±—É—Ä—è–∫–æ–≤–∏–π —Å–∞–ª–∞—Ç –∞–±–æ –∫–≤–∞—à–µ–Ω—É –∫–∞–ø—É—Å—Ç—É"
        add_even = "‚Ä¢ –ö–ª—ñ—Ç–∫–æ–≤–∏–Ω–∞: 1 —Å—Ç. –ª–æ–∂–∫–∞ –ª—å–æ–Ω—É/—á—ñ–∞"
    elif week == 3:
        add_morning = "‚Ä¢ DIM 100 –º–≥ –ø—ñ—Å–ª—è —Å–Ω—ñ–¥–∞–Ω–∫—É"
        add_day = "‚Ä¢ –ë—Ä–æ–∫–æ–ª—ñ/–∫–∞–ø—É—Å—Ç—è–Ω—ñ —â–æ–¥–Ω—è"
        add_even = "‚Ä¢ –î–∏—Ö–∞–Ω–Ω—è 4-7-8, 10 —Ö–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º"
    elif week == 4:
        add_morning = "‚Ä¢ DIM 100 –º–≥ + –í—ñ—Ç–∞–º—ñ–Ω C 500 –º–≥"
        add_day = "‚Ä¢ –†–æ–∑—Ç–æ—Ä–æ–ø—à–∞ 200‚Äì400 –º–≥"
        add_even = "‚Ä¢ –¢–µ–ø–ª–∞ –≤–∞–Ω–Ω–∞/—Å–∞—É–Ω–∞ (1‚Äì2 —Ä–∞–∑–∏ —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è)"
    elif week == 5:
        add_morning = "‚Ä¢ DIM –∞–±–æ I3C (–∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ)"
        add_day = "‚Ä¢ –ö–ª—ñ—Ç–∫–æ–≤–∏–Ω–∞ —â–æ–¥–Ω—è + –∫–∞–ø—É—Å—Ç—è–Ω—ñ"
        add_even = "‚Ä¢ –¢–µ–ø–ª–µ –º–æ–ª–æ–∫–æ/—á–∞–π –∑ –≥–ª—ñ—Ü–∏–Ω–æ–º –ø–µ—Ä–µ–¥ —Å–Ω–æ–º (–∑–∞ –±–∞–∂–∞–Ω–Ω—è)"
    else:  # week 6
        add_morning = ""
        add_day = "‚Ä¢ –†—É—Ö 30 —Ö–≤/–¥–µ–Ω—å (–º—ñ–Ω—ñ–º—É–º 6000‚Äì8000 –∫—Ä–æ–∫—ñ–≤)"
        add_even = "‚Ä¢ –ó–∞–ø–∏—à–∏ 3 —Ä–µ—á—ñ, –∑–∞ —è–∫—ñ –≤–¥—è—á–Ω–∞"

    text = (
        f"–î–µ–Ω—å {day_number} ‚Ä¢ –¢–∏–∂–¥–µ–Ω—å {week}: {WEEK_FOCUS[week]}"
        f"\n\nüåû –†–∞–Ω–æ–∫\n{base_morning}"
        + (f"\n{add_morning}" if add_morning else "") +
        f"\n\nüçΩÔ∏è –î–µ–Ω—å\n{base_day}\n{add_day}"
        f"\n\nüåô –í–µ—á—ñ—Ä\n{base_even}\n{add_even}"
        "\n\nüíß –í–æ–¥–∞ 30 –º–ª/–∫–≥, 10 —Ö–≤ —Ö–æ–¥—å–±–∏ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–π–æ–º—É —ó–∂—ñ, –±–µ–∑ –∫–∞–≤–∏ –Ω–∞—Ç—â–µ."
    )
    return text

def calc_day_number(start_date: str) -> int:
    s = dt.date.fromisoformat(start_date)
    today = dt.datetime.now(KYIV_TZ).date()
    return (today - s).days + 1

# ---------- Bot Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    chat_id = str(update.effective_chat.id)
    today_iso = dt.datetime.now(KYIV_TZ).date().isoformat()

    if chat_id not in data["users"]:
        data["users"][chat_id] = {"start_date": today_iso, "time": "09:00"}
        save_data(data)
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø –Ω–∞–≥–∞–¥–∞—é —Ç–æ–±—ñ —â–æ–¥–Ω—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É ‚ÄúEstrogen & Liver Reset‚Äù. "
            "–°—Ç–∞—Ä—Ç —Å—å–æ–≥–æ–¥–Ω—ñ. –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: 09:00 (Europe/Kyiv). "
            "–ú–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /set_time HH:MM (–Ω–∞–ø—Ä., /set_time 08:30). "
            "–ö–æ–º–∞–Ω–¥–∏: /today, /week, /set_time, /stop, /help"
        )
    else:
        await update.message.reply_text("–Ø –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π. –ö–æ–º–∞–Ω–¥–∏: /today, /week, /set_time, /stop, /help")
    await schedule_reminder_for_user(context, chat_id)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        "/today ‚Äî —á–µ–∫–ª—ñ—Å—Ç –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ\n"
        "/week ‚Äî —Ñ–æ–∫—É—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è\n"
        "/set_time HH:MM ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å —â–æ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "/stop ‚Äî –≤–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
        "/start ‚Äî —É–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–∞ –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É"
    )

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    chat_id = str(update.effective_chat.id)
    if chat_id not in data["users"]:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return
    day = calc_day_number(data["users"][chat_id]["start_date"])
    day = max(1, min(42, day))
    await update.message.reply_text(day_plan(day))

async def week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    chat_id = str(update.effective_chat.id)
    if chat_id not in data["users"]:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return
    day = calc_day_number(data["users"][chat_id]["start_date"])
    day = max(1, min(42, day))
    week_num = (day - 1)//7 + 1
    await update.message.reply_text(f"–¢–∏–∂–¥–µ–Ω—å {week_num}: {WEEK_FOCUS[week_num]}")

async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    chat_id = str(update.effective_chat.id)
    if chat_id not in data["users"]:
        await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω–∏ /start")
        return
    if not context.args or len(context.args[0]) != 5 or context.args[0][2] != ":":
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_time HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30)")
        return
    hh, mm = context.args[0].split(":")
    try:
        hh, mm = int(hh), int(mm)
        assert 0 <= hh < 24 and 0 <= mm < 60
    except Exception:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /set_time HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:30)")
        return
    data["users"][chat_id]["time"] = f"{hh:02d}:{mm:02d}"
    save_data(data)
    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –æ {hh:02d}:{mm:02d} (Europe/Kyiv).")
    await schedule_reminder_for_user(context, chat_id, reschedule=True)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    chat_id = str(update.effective_chat.id)
    if chat_id in data["users"]:
        job_name = f"daily_{chat_id}"
        for job in context.job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
        await update.message.reply_text("–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ ‚Äî /start")
    else:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# ---------- Scheduling ----------
async def schedule_reminder_for_user(context: ContextTypes.DEFAULT_TYPE, chat_id: str, reschedule: bool=False):
    data = load_data()
    if chat_id not in data["users"]:
        return
    job_name = f"daily_{chat_id}"
    for job in context.job_queue.get_jobs_by_name(job_name):
        job.schedule_removal()
    time_str = data["users"][chat_id]["time"]
    hour, minute = map(int, time_str.split(":"))
    when = dt.time(hour=hour, minute=minute, tzinfo=ZoneInfo("Europe/Kyiv"))
    context.job_queue.run_daily(send_daily, time=when, data={"chat_id": chat_id}, name=job_name)

async def send_daily(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.data["chat_id"]
    data = load_data()
    if chat_id not in data["users"]:
        return
    day = calc_day_number(data["users"][chat_id]["start_date"])
    if day > 42:
        await context.bot.send_message(chat_id=chat_id,
            text=("üéâ 6 —Ç–∏–∂–Ω—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ—Ö—ñ–¥ —É —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ–π–Ω—É —Ñ–∞–∑—É: "
                  "–ø—Ä–æ–¥–æ–≤–∂—É–π –±–∞–∑—É (Thyrocsin, D3, –û–º–µ–≥–∞, Mg); NAC —Ç–∞ DIM ‚Äî 5 –¥–Ω—ñ–≤/—Ç–∏–∂ —É –∑–Ω–∏–∂–µ–Ω–∏—Ö –¥–æ–∑–∞—Ö; "
                  "—Ä–æ–∑—Ç–æ—Ä–æ–ø—à–∞/–∫—É—Ä–∫—É–º—ñ–Ω ‚Äî –∫—É—Ä—Å–∞–º–∏ 2 —Ç–∏–∂/–º—ñ—Å. "
                  "–ó–∞ –±–∞–∂–∞–Ω–Ω—è–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ü–∏–∫–ª."))
        for j in context.job_queue.get_jobs_by_name(job.name):
            j.schedule_removal()
        return
    day = max(1, day)
    await context.bot.send_message(chat_id=chat_id, text=day_plan(day))

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("today", today))
    app.add_handler(CommandHandler("week", week))
    app.add_handler(CommandHandler("set_time", set_time))
    app.add_handler(CommandHandler("stop", stop))
    app.job_queue
    print("Bot running...")
    app.run_polling()

if __name__ == "__main__":
    main()
